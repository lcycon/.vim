import org.junit.*;
import static org.junit.Assert.*;

public class HeapImpl12Tester {
    private HeapImpl12<Integer> _heap;
    private final int D = 3;

    @Before
    public void setUp() {
        _heap = new HeapImpl12<Integer>(2);
    }

    @Test
    public void testAdd1() {
        _heap.add(3);
    assertEquals(1,_heap.size());
    }
    @Test
    public void testAdd100ClearandAdd() {
        for (int i = 0; i < 100; i++) {
            _heap.add(i);
        }
        assertEquals(100,_heap.size());
        _heap.clear();
        assertEquals(0,_heap.size());
        for (int i = 0; i < 100; i++) {
            _heap.add(i);
        }
        assertEquals(100,_heap.size());
    }

    @Test
    public void testAddMoreThanD() {
        for (int i = 0; i < 200; i++) {
            _heap.add(i);
        }
        assertEquals(200,_heap.size());
    }
    @Test
    public void testPeekLargest() {
        for (int i = 0; i < 200; i++) {
            _heap.add(i);
        }
        assertEquals(199,(int) _heap.peekLargest());
    }

    @Test
    public void testRemoveLargest() {
        for (int i = 0; i < 10; i++) {
            _heap.add(i);
        }
        assertEquals(9,(int) _heap.removeLargest());
        assertEquals(8,(int) _heap.removeLargest());
        assertEquals(7,(int) _heap.removeLargest());
        assertEquals(6,(int) _heap.removeLargest());
        assertEquals(5,(int) _heap.removeLargest());
        assertEquals(4,(int) _heap.removeLargest());
        assertEquals(3,(int) _heap.removeLargest());
        assertEquals(2,(int) _heap.removeLargest());
        assertEquals(1,(int) _heap.removeLargest());
        assertEquals(0,(int) _heap.removeLargest());
    }

    @Test
    public void testHeight() {
        for (int i = 0; i < 10; i++) {
            _heap.add(i);
        }
        assertEquals(1, _heap.height(5));
    }

    @Test
    public void testRemove() {
        for (int i = 0; i < 10; i++) {
            _heap.add(i);
        }
        _heap.remove(2);
        
        assertEquals(9,(int) _heap.removeLargest());
        assertEquals(8,(int) _heap.removeLargest());
        assertEquals(7,(int) _heap.removeLargest());
        assertEquals(6,(int) _heap.removeLargest());
        assertEquals(5,(int) _heap.removeLargest());
        assertEquals(4,(int) _heap.removeLargest());
        assertEquals(3,(int) _heap.removeLargest());
        assertEquals(1,(int) _heap.removeLargest());
        assertEquals(0,(int) _heap.removeLargest());
    }

    @Test
    public void testContains() {
        for (int i = 0; i <10; i++) {
            _heap.add(i);
        }
        assertEquals(true,_heap.contains(3));
        assertEquals(false,_heap.contains(49));
    }

}
