import org.junit.* ;
import static org.junit.Assert.* ;
import java.util.HashMap;

public class Tester{

    @Test
    public void testConstant(){
        Constant c = Constant.parse("2.0");
        assertEquals(2.0, c.eval(new HashMap<String,Double>()), 0);
    }

    @Test
    public void testIdentifier(){
        HashMap h = new HashMap<String, Double>();
        h.put("xy", 3.0);
        Identifier i = Identifier.parse("xy");
        assertEquals(3.0, i.eval(h), 0);
    }

    @Test
    public void testFactor(){
        HashMap h = new HashMap<String, Double>();
        h.put("xy", 3.0);
        Factor f1 = Factor.parse("2.0");
        assertEquals(2.0, f1.eval(h), 0);
        f1 = Factor.parse("xy");
        assertEquals(3.0, f1.eval(h), 0);
        f1 = Factor.parse("(a=4.0)");
        assertEquals(4.0, f1.eval(h), 0);
    }

    @Test
    public void testTerm(){
        Term t = Term.parse("3.0 * 4.0");
        assertEquals(12.0, t.eval(new HashMap<String, Double>()), 0);
    }

    @Test
    public void testOperation(){
        Operation o = Operation.parse("3.0 * 4.0");
        assertEquals(12.0, o.eval(new HashMap<String, Double>()), 0);
        o = Operation.parse("4.0 / 2.0");
        assertEquals(2.0, o.eval(new HashMap<String, Double>()), 0);
        o = Operation.parse("8 + 376 - 0.0 + 12 - 3.14159");
        assertEquals(392.85841, o.eval(new HashMap<String, Double>()), 0);
        o = Operation.parse("3.0 * 4.0 + 5.0");
        assertEquals(17.0, o.eval(new HashMap<String, Double>()), 0);
    }

    @Test
    public void testAssignment(){
        Assignment a = Assignment.parse("a = 4.0");
        HashMap<String, Double> h = new HashMap<String, Double>();
        assertEquals(4.0, a.eval(h), 0);
        assertTrue(h.containsKey("a"));
        assertEquals(4.0, h.get("a"), 0);
    }   

    @Test
    public void testExpr(){
        HashMap<String, Double> h = new HashMap<String, Double>();
        Expr e = Expr.parse("(((((-1e3)))))");
        assertEquals(-1000.0, e.eval(h), 0.0);
        Expr e = Expr.parse("(1+2)*(3-4)/5");
        assertEquals(-0.6, e.eval(h), 0.0);
        Expr e = Expr.parse("1+2*3-4/5");
        assertEquals(6.2, e.eval(h), 0.0);
        Expr e = Expr.parse("x = y = z = 0");
        assertEquals(0, e.eval(h), 0.0);
        assertTrue(h.containsKey("x"));
        assertEquals(0.0, h.get("x"), 0.0);
        assertTrue(h.containsKey("y"));
        assertEquals(0.0, h.get("y"), 0.0);
        assertTrue(h.containsKey("z"));
        assertEquals(0.0, h.get("z"), 0.0);
    }   

}
